{% extends 'layout.twig' %}

{% block body %}
  <div class="row mt-2">
    <div class="col-12">
      <h1 class="display-1">Live Dashboard</h1>
    </div>
  </div>
  <div class="row mt-2">
    <div class="container mt-5">
      <div class="row">
        <div class="col-md-4">
          <div class="card">
            <div class="card-header">
              pink balls
            </div>
            <div class="card-body">
              <h5 class="card-title">Current Value: <span id="pink-value">Empty</span></h5>
            </div>
          </div>
        </div>
        <div class="col-md-4">
          <div class="card">
            <div class="card-header">
              yellow balls
            </div>
            <div class="card-body">
              <h5 class="card-title">Current Value: <span id="yellow-value">Empty</span></h5>
            </div>
          </div>
        </div>
        <div class="col-md-4">
          <div class="card">
            <div class="card-header">
              Other balls
            </div>
            <div class="card-body">
              <h5 class="card-title">Current Value: <span id="other-value">Empty</span></h5>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="col-12 mt-5">

      <div class="card shadow">
        <div class="card-body">
          <h4 class="card-title">Live data</h4>
          <p class="card-text">Last acquired data at <span id="timestamp" >...waiting...</span>.</p>
          <h4 id="measure" class="display-3">nA</h4>

        </div>
      </div>

    </div>
    <div class="col-6 my-5">
      <div class="card shadow">
        <div class="card-body">
          <h4 class="card-title">Control</h4>
          <p class="card-text">Use these controls to start or stop a record</p>
          <button type="button" name="" id="start" class="btn btn-success btn-lg btn-block" style="display: block">Start</button>
          <button type="button" name="" id="stop" class="btn btn-warning btn-lg btn-block" style="display: none">Stop</button>
          <p class="card-text">Current state : <span id="state">nA</span> </p>
        </div>
      </div>
    </div>

    <div class="col-6 my-5">
      <div class="card shadow">
        <div class="card-body">
          <h4 class="card-title">Control</h4>
          <p class="card-text">Use this control to reset all containers</p>
          <button type="button" name="" id="reset" class="btn btn-success btn-lg btn-block" style="display: block">Reset</button>
        </div>
      </div>
    </div>
  </div>
{% endblock %}


{% block scripts %}

  <script type="text/javascript">
  
    $(() => {

      let pinkCount = 0;
      let yellowCount = 0;
      let otherCount = 0;
    
      setInterval(() => {
        $.ajax({
          type: "post",
          url: "/api/state",
          dataType: "json",
          success: function (response) {
            console.log(response);
            $('#timestamp').text(response.lastTimestamp);
    
            // Réinitialisation du compteur si lastAcquisition est égal à 0
            if (response.lastAcquisition === 0) {
              pinkCount = 0;
              yellowCount = 0;
              otherCount = 0;
              $('#pink-value').text(pinkCount);
              $('#yellow-value').text(yellowCount);
              $('#other-value').text(otherCount);
            }
    
            // Condition pour afficher pink ou yellow en fonction de la valeur de lastAcquisition
            if (response.lastAcquisition === 1) {
              pinkCount++;
              if (pinkCount <= 4) {
                $('#pink-value').text(pinkCount);
              } else {
                otherCount++;
                $('#other-value').text(otherCount);
              }
              $('#measure').text("pink");
            } else if (response.lastAcquisition === 2) {
              yellowCount++;
              if (yellowCount <= 4) {
                $('#yellow-value').text(yellowCount);
              } else {
                otherCount++;
                $('#other-value').text(otherCount);
              }
              $('#measure').text("yellow");
            } /*else {
              otherCount++;
              $('#other-value').text(otherCount);
              $('#measure').text(response.lastAcquisition);
            }*/
    
            $('#state').text((response.idle ? "IDLE" : "recording..."));
            if (response.idle) {
              $("#start").show();
              $("#stop").hide();
            } else {
              $("#stop").show();
              $("#start").hide();
            }
          }
        });
      }, 1000);
    
      $("#start").click(function (e) {
        e.preventDefault();
        $.post("/api/start",
          function (data, textStatus, jqXHR) {
    
          },
          "json"
        );
      });
    
      $("#stop").click(function (e) {
        e.preventDefault();
        $.post("/api/stop",
          function (data, textStatus, jqXHR) {
    
          },
          "json"
        );
      });
    
      // Ajouter la logique de réinitialisation lorsque le bouton Reset est cliqué
      $("#reset").click(function (e) {
        e.preventDefault();
        $.post("/api/reset",
          function (data, textStatus, jqXHR) {
            // Réinitialiser les compteurs et l'interface utilisateur
            pinkCount = 0;
            yellowCount = 0;
            otherCount = 0;
            $('#pink-value').text(pinkCount);
            $('#yellow-value').text(yellowCount);
            $('#other-value').text(otherCount);
          },
          "json"
        );
      });
    
    });

  </script>

{% endblock %}